# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  batch: true
  branches:
    include:
      - develop
      - master
  paths:
    include:
      - build/*
      - sample/*
      - docker/*
      - src/*
      - test/*
      - SnowLeopard.sln
      - common.props
      - version.props
      - NuGet.Config
      - .dockerignore
      - Dockerfile
    exclude:
      - ".vscode/*"
      - ".azure/*"
      - .travis.yml
      - .gitignore
      - .editorconfig
      - appveyor.yml
      - LICENSE
      - "./*.CN"
      - "./*.EN"
      - "./*.md"
      - "./*.sh"

pr:
  branches:
    include:
      - develop
    exclude:
      - master
  paths:
    include:
      - build/*
      - sample/*
      - docker/*
      - src/*
      - test/*
      - SnowLeopard.sln
      - common.props
      - version.props
      - NuGet.Config
      - .dockerignore
      - Dockerfile
    exclude:
      - ".vscode/*"
      - ".azure/*"
      - .travis.yml
      - .gitignore
      - .editorconfig
      - appveyor.yml
      - LICENSE
      - "./*.CN"
      - "./*.EN"
      - "./*.md"
      - "./*.sh"

jobs:
  - job: Linux
    pool:
      vmImage: "ubuntu-latest"

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"

    steps:
      - task: DotNetCoreInstaller@1
        displayName: install
        inputs:
          version: "2.2.300"

      - task: DotNetCoreCLI@2
        displayName: restore
        inputs:
          command: "restore"
          projects: "$(solution)"
          feedsToUse: config
          nugetConfigPath: NuGet.Config
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: build
        inputs:
          command: "build"
          projects: "$(solution)"
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: test
        inputs:
          command: "test"
          testRunTitle: "test"
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

  - job: macOS
    pool:
      vmImage: "macOS-latest"

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"

    steps:
      - task: DotNetCoreInstaller@1
        displayName: install
        inputs:
          version: "2.2.300"

      - task: DotNetCoreCLI@2
        displayName: restore
        inputs:
          command: "restore"
          projects: "$(solution)"
          feedsToUse: config
          nugetConfigPath: NuGet.Config
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: build
        inputs:
          command: "build"
          projects: "$(solution)"
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: test
        inputs:
          command: "test"
          testRunTitle: "test"
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

  - job: Windows
    pool:
      vmImage: "windows-latest"

    variables:
      solution: "**/*.sln"
      buildPlatform: "Any CPU"
      buildConfiguration: "Release"

    steps:
      - task: DotNetCoreInstaller@1
        displayName: install
        inputs:
          version: "2.2.300"

      - task: DotNetCoreCLI@2
        displayName: restore
        inputs:
          command: "restore"
          projects: "$(solution)"
          feedsToUse: config
          nugetConfigPath: NuGet.Config
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: build
        inputs:
          command: "build"
          projects: "$(solution)"
          arguments: "--configuration $(buildConfiguration)"

      - task: DotNetCoreCLI@2
        displayName: test
        inputs:
          command: "test"
          testRunTitle: "test"
          arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
